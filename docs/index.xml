<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Diversity is Rainbows!</title>
    <link>https://matinana.github.io/diversity_is_rainbows/</link>
    <description>Recent content on Diversity is Rainbows!</description>
    <image>
      <url>https://matinana.github.io/diversity_is_rainbows/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://matinana.github.io/diversity_is_rainbows/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 20 Dec 2022 08:07:46 +0900</lastBuildDate><atom:link href="https://matinana.github.io/diversity_is_rainbows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3年間で2つのサービスクローズと向き合って</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_1220/</link>
      <pubDate>Tue, 20 Dec 2022 08:07:46 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_1220/</guid>
      <description>サービスクローズ、それはプロダクト開発に携わる者には決して無視できない可能性の一つ。 ですが、その内容が語られることはあまり多くないと感じています。
私はこの 3 年で 2 つのサービスクローズに関わりました。
一つは完全なサービスクローズ。 もう一つは自社でのサービス提供は終了で、新しい会社で新サービスとして生まれ変わる引き継ぎを行ったケース。
この記事では、その時にあったことと、そこから得た学びをまとめることで、サービスクローズに直面することになるかもしれない貴方の負担や悲しみが少しでも減らせる一助に出来ればと思っています。
1. サービスが終わると伝えられるとき 1 つ目のサービス終了は、渋谷の stream にあるレストランで伝えられました。
関わっているすべての職種を含めて 6 人の小さなサービス。 業務時間中に週 5 で稼働していた 4 人が「ちょっと外出られる？」と急遽集められて、プロダクトオーナーから終了を伝えられました。
2 つ目のサービス終了はプロダクトオーナーとの 1on1 の中で。 自社でのサービスは終了だけれど、なんとかしてサービスを残したいと思っている旨も伝えていただきました。
サービスクローズに直面するという経験。 多く経験するものではありません。 当然これらを受け止めることは困難なことです。
まなび 悲しみと辛さがくるタイミングは人それぞれ異なっていることを認めよう クローズの話があったのち、「クローズを伝えたときに泣いた人もいる」という話を聞きました。 自分は二回ともその場は冷静に受け止めていたのですが、後々じわじわと悲しみが押し寄せてきました。
最初に「悲しい・辛い」と伝えられた人は、その後もそれを吐露しやすくなりますが、人によってそれが溢れてくるタイミングは異なるものです。
クローズが決まると、期限内にやるべきことも沢山生まれ、チームの余裕や明るさも当然のように失われがちになります。それによってチームの空気は重くなり、益々自身で悲しみと辛さを背負ってしまうことになります。
「最初に泣かなかったから自分には泣く資格がない」なんてことはないです。
サービスクローズというハードシングスに向き合うために、悲しみや辛さが出来てたときにチームメンバーと分かち合いましょう。 それらの感情をチームに共有することは、どの局面においてもネガティブなものではありません。愛です。
2. サービスが終わると伝えられたあと サービスが終わると伝えられたあとは、クローズに向けた動きが始まります。
しかし、貴方がクローズを知るのと、同僚がクローズを知るのは同じタイミングではない可能性があります。
それは、どんな理由でのクローズにせよ、会社全体に不安が広がらないようにクローズの公開には丁寧なコミュニケーションが必要になるからです。
一方、サービスに関わる人には、その丁寧なプロセスをも超越して早く伝えることが重要な場合があります。 結果、貴方と同僚は違うタイミングでそれを知ることになります。それは同僚だけではなく、社外の親友や家族なども同じかもしれません。
「自分が今一番不安に思っていること」を話したい人に話せない。 「自分が今やっていること」を社内の人に話せない。
これはとても苦しいことの一つです。
まなび 苦しみを誇りに思おう どうしてもそれを隠すことが苦しい場合は、勿論チームに相談をして隠さずにいられるように努めることが良いと思います。 ただ、今振り返ると、他の人よりも先に自分が知れているという状況は、幸福な事だと捉えることも出来ます。
それだけの権利と、その権利を掴むまでの責務を担ってきたからこそ、貴方は早くそれを知れています。 知るタイミングに差があるのは、誰かを苦しめるためではなく、会社全体を守るためです。
知っている者同士で協力をして、今出来ることを着実にこなしましょう。
3. クローズへと動き出すとき サービスクローズがチーム全体や、全社に伝わり、実際にクローズに向けた動きが始まる頃。
目の前の仕事だけでなく、他の人のその先を見据えた動きが目につくこともあります。
今のサービスをなんとか違う形で続けてコミットし続けようと思っている人 サービス終了後は自社の違うサービスで働こうと思っている人 転職を考える人 色んなパターンの動きや話が出てくることがあります。 それに際して「貴方はどうするの？」とふらっと聞かれることもあります。
目の前のクローズ対応でアップアップなのに、その先のことを聞かれても…と困惑するかもしれません。 また、本当は違う選択を取りたいのに、目の前のチームメンバーへの配慮で意図しない同意や共感を行ってしまうかもしれません。
まなび 自分の想いを大切にすればよい 二つのサービス終了を通して、プロダクトオーナーは「貴方が選びたいことを選ぶのが一番だよ」と終始言い続けてくれました。</description>
    </item>
    
    <item>
      <title>直近のコミットログ50件から振り返りをしてみる企画</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_1129/</link>
      <pubDate>Tue, 29 Nov 2022 01:49:39 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_1129/</guid>
      <description>前回の記事のラストに「良い PR に含まれるもの」として「適切な粒度のコミット」を記載しました。
適切な粒度のコミット…言葉にすると「そりゃ大切だよね！」となりますが、実際は適切な粒度のコミットを作るのは難しいですよねｗ
今回は「どうやって適切な粒度のコミットを作るのか？」ではなく、「自分はどれくらい適切な粒度のコミットが出来ているのだろう？」を振り返るために改めて自分のコミットログを見直して反省する回を開いてみようと思います…！！笑
(その前に…!) 接頭辞 自分はコミットメッセージには Angular.js/DEVELOPERS.md に記載がある下記の接頭辞を使っているので、事前に書いておきます！
### Type Must be one of the following: - feat: A new feature - fix: A bug fix - docs: Documentation only changes - style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) - refactor: A code change that neither fixes a bug nor adds a feature - perf: A code change that improves performance - test: Adding missing or correcting existing tests - chore: Changes to the build process or auxiliary tools and libraries such as documentation generation 接頭辞をつけることの利点は「コミットの内容がわかりやすくなる」という利点だけでなく、「機能を接頭辞の type 単位で切り分けるようになる」という効能もあります。</description>
    </item>
    
    <item>
      <title>良いPRに含まれているもの</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_1128/</link>
      <pubDate>Mon, 28 Nov 2022 00:38:08 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_1128/</guid>
      <description>良い PR と、良くない PR が世の中にはあると思いますが、それを切り分けるものは「コード自体の品質」や「どういうスコープで切り分けているか」など、複数の要素が合わさって判断されていると考えます。
今日は「良い PR」の構成要素の一つ、コードやスコープではなく、「PR 自身の中身」がどうあると良い PR になるのだろうということを考えてみます。
良い PR とは？ コードは理解しやすくなければいけない。
リーダブルコード - 名著、リーダブルコードで書かれているように、良いコードとは理解しやすいコードです。
それはコードというものは自身が書く時間よりも、他者に読まれる時間の方が長いから必然ではあります。
PR も同様だと考えています。他者にとって理解しやすい内容が網羅されている PR こそ良い PR だと考えています。
これは PR がコードと同じく下記の特性を持っているからです。
長期に渡って読まれる なにか既存の実装を変更しようと思った際に、「ここの背景ってどうなっているんだろう？」と当時のチケットや slack を探しても、見つけるのが難しい場合があります。
ですが、PR であればコードから blame で一瞬で拾えます。
自分も今でも数年前の PR を読むことはザラにありますが、PR にコード以外の情報がないとコードをしっかり読む必要があり、色んなコストが発生してしまいます。
多くの人に読まれる PR を読む対象は目の前のレビュアーだけではありません。
レビューする人が決まっていて、「この人なら詳しいから省略しても良い」は多くのケースで当てはまりません。
レビュー時点ではレビュアーがドメインの知識を持っているため詳細が省略可能であっても、未来の時点で他の人が参照する場合はそうだとは限らないからです。
上記のような特性がある以上、コードに気を使うエンジニアがコードを取りまとめる PR に気を使わないのは本末転倒です。
では、どんな PR だと理解されやすい PR になるでしょうか？
次項で自分が「あると良いなぁ」と思っている構成要素を上げてみようと思います！
具体的な PR の構成要素 （その前に）対象の PR の性質 PR の情報をどこまで詳細に書くのかは、下記のような情報によって異なります。
機能のサービスレベル PR で扱うスコープの大きさ レビューからマージまでの優先度・緊急度 レビュー相手の PR で取り扱う実装や仕様への理解度 ここでは、障害対応などでなく、ある程度スケジュールに余裕があり、粒度も極端に小さくなく、レビュアーもランダムな方にレビューする場合の PR の場合とします。</description>
    </item>
    
    <item>
      <title>チームでプランニングポーカーをやってみた学び</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_1126_2/</link>
      <pubDate>Sat, 26 Nov 2022 22:52:31 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_1126_2/</guid>
      <description>最近チーム内で締め切りがギリギリになったり、スケジュール超過が発生するプロジェクトが連続で発生していました。
現在のチームではスケジュール見積もりフローが確立されてなく、ユーザーストーリーをもとに PdM が大まかなスケジュールを引いて、アサインされたエンジニアが PdM のスケジュールにプラスマイナス（大概にしてプラスになりますが…）でスケジュールを決めるという属人化されたスケジューリングを行っています。
もちろん、それが必ずしも悪ではなく、良い点もあるのですが、結果として特に長めのタスクで前述のような問題が頻発していました。
その解決策の一つとして、見積もり手法である「プランニングポーカー」をチームでやってみたら気づきが多かったので記事で共有させて貰えればと思います！
プランニングポーカーとは？ プランニングポーカーはプロジェクト開発における期間をチームで見積もりする手法の一つになります。
具体的なやり方はググって貰えればと思いますが、一言でいうと下記のような見積もり手法です。
1. ユーザーストーリー(開発タスク)を読み上げる 2. チームメンバーが各々でそのストーリーに対する見積もりを表明する 3. 各々の出した見積もりに関して「なぜその数値にしたか？」の議論を行う 4. 3で出た議論をもとに再度見積もりを行う (4の結果がチームの合意になるまで繰り返す) なぜわざわざこのような手法を行う必要があるのか？
それは、プロダクト開発における見積もりが困難だからです。
プロダクト開発における見積もりでは下記の「不確実性コーン」という図でも示されるように、最大４倍のスケジュールのズレが発生すると言われています。
不確実性コーン (引用: アジャイルサムライ 達人開発者への道)
このように見積もりは難しいという前提があるため、見積もりの目的は「正確な開発期間を定めること」ではなく「このプロジェクトはやり遂げられそうなのか？」を判断することに価値があります。
プランニングポーカーは、チームメンバーでの議論・対話を主軸においた手法であるため、
複数人の知見によって考慮漏れを防いでより詳細なタスク把握ができる 他プロジェクトへの影響度やスコープの切り分けに対する共通認識の把握ができる 上記メリットをもとに「このプロジェクトをやり遂げられそうなのか？」という問いに対して複合的な判断を行う事ができるようになります。
前フリとしてプランニングポーカーや見積もりに関して触れてみましたが、これらは多くの記事で語られているので、今回は実際にやってみた気づきをピックアップして共有します！
気づき タスクには人によって「見えているタスク」と「見えていないタスク」が存在しており、それを認知することが正しい見積もりに寄与する 今回は「Ruby アップデート」を題材にプランニングポーカーを行ってみました。
みなさんは「Ruby アップデート」と聞いてどんなタスクが頭に思い浮かびますか？
Ruby のバージョンをアップデートする 上記アップデート後の動作確認 上記の二つのタスクでしょうか？
ではこの二つの見積もりをやりますね！
はいストップ！！！ 確かに上記で Ruby のアップデート自体はできるかもしれません。
しかし、多くの場合上記だけでは Ruby アップデートで得たかった結果は得ることができないと思います。
Ruby のアップデートに伴って廃止予定になる機能の Deprecated Warning も潰しておかないと、適切に使えない機能が生まれます。
また、関連する gem のアップデートも必要になりますし、CircleCI で CI/CD を実現している場合は CI のベースイメージの更新も必要になります。
このように、一言に「Ruby アップデート」と括っても、細かく切り分けるとその中には色んなタスクが含まれていることがわかります。
勿論、プランニングポーカーを行う際に上記を把握していなくても、見積もりはできますし、開発も進められます。
しかし、これでは適切な見積もりは出来ません。上記を認識していないということは、上記が見積りの期間に入っていないということです。この場合、設定されるスケジュールが恐ろしい結果に繋がるのは明白ですよね。
プランニングポーカーでは、複数のメンバーで対話を行いながら見積もりを進めるため、その開発に必要な「見えているタスクと見ていないタスク」をチームの知見で洗い出す事ができます。
タスクの完了定義をチームで揃えることが正しい見積もりに寄与する 先程は見えているタスクと見えていないタスクに関して触れましたが、見えているタスクにも「完了をどこにするか？」というスコープの概念があります。</description>
    </item>
    
    <item>
      <title>自作アプリを3年間使い続けてみて</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_11_26/</link>
      <pubDate>Sat, 26 Nov 2022 18:48:24 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_11_26/</guid>
      <description>自分で 3 年ほど前に作った日記アプリのOmoidataに投稿した日記の数が気づいたら 200 記事を超えていた。ちょっと感慨深くなったので、言葉に残しておこうと思います。
Omoidata は「思い出 x データ」を名前の由来としているように、思い出を様々な要素と共に記録し、それをデータとして客観視することで未来をよりよく築いていく気づきを得られることを目的にした日記アプリです。
日記というコンテンツは思い出を記録し、振り返ることを目的に使われることが一般的ですが、振り返るための機能としては「タグ」や「カレンダー」など、数少ない機能に限定されていて十分だとは言えません。
そこで Omoidata では、残したい思い出に含まれるであろう友人や有名人などの「人物」をタグのように登録する機能、そのときに感じた感情を段階に分けて振り返られる「気持ち機能」など、自身の思い出をよりデータ化して記録できる機能を備えています。
上記のような思いを込めて作ったアプリで、実際にリリースして 3 年程度たった今あらためて振り返ってみると、アプリ上で全 216 記事を書いていることがわかりました。
単純計算すると 365*3 /216 で 5.069…なので、5 日に一回程度日記を書いていることになります。
個人的な指標としては ★4 つ以上はハッピーなときにつけているので、★5 とあわせて日記をつけた 6 割弱の日付がハッピーということになります。
「幸せな 3 年間だったんだよな〜」と言えそうですが、日記に残しておきたい日ってハッピーな日が多いのは当然なので、そこの正しい数値をすくい上げる仕組みをそろそろ追加しないとな〜という反省もあります。
むしろ興味深いのは「未選択」としている日付の日記。
今日は星は未設定。いつかこれが星五つだよと言えるように頑張ろう！
上記は未選択の日記の一つに書かれている言葉です。
このような「星を設定するのが面倒なので取り急ぎ設定しない」ではなく、「（今日の選択の結果を決めるのは将来の自分であるとして）意図して星の選択をしない」という使い方をしています。
これは作った当時は想定をしていないような使い方だったので、開発者自身の自分がその使い方をしているのはとても面白い体験だと思いました。
個人アプリ制作。
自身でも何個かアプリを作ってきました。その多くが自分のペインを解消するためのアプリでした。
でも改めて、作ったアプリの中で長期的に使っているのが Omoidata だけであることを考えると、誰かの、少なくとも自分の「本気の課題」を解決するためのアプリが良いよなぁと思います。
自分は 17 歳からずーっと継続的に日記を書き続けていて、Omoidata を作る前はマイブックというその年ごとの表紙があるだけの白紙が 365 ページ続く文庫本タイプの日記を毎年使っていたんですよね。
でも過去の日記を振り返りたいときに検索性がめちゃくちゃ低いし、ふとしたときに振り返るのもわざわざ本を取り出して読まないといけないので大変でした。
日記だからといって毎日書くわけではないので、空白のページが続いちゃうのも切なかったですしね…笑
10 年以上日記を使い続けているからこそ上の課題は自分にとって大きな問題だったし、日記が与えてくれる恩恵も分かっていたので Omoidata を作りきることができて、今でも使い続けているのだと思います。
作って 3 年以上が経ち、エンジニアリングの知識もプロダクト開発の経験も高まりました。
使って 3 年以上が経ち、このプロダクトの課題も、あると良い機能も随分と知見が増えました。
最近はめっきりアプリ開発に時間を使えていませんでしたが、少しずつ再開していこうと思います。ぜひこの場でもまた Omoidata の話をさせてください。
思い出は活力になり、記録は指針になる。
この想いを大切に、がんばります！
Happy Hacking!</description>
    </item>
    
    <item>
      <title>いまのデスク環境書いてみるぜ！</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_1123/</link>
      <pubDate>Wed, 23 Nov 2022 18:38:28 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_1123/</guid>
      <description>こんにちは matinana です。
今日はエンジニアブログあるあるのデスク周りの記事でも書いてみようと思います。
現在のデスク周りの写真 デスク デスクの足部分は電動式スタンディングデスクのFLEXSPOT の EF1を使っています！
画像のようにデスクの高さをボタンひとつで変更可能で、71cm〜121cm の範囲で乗降を行うことができます。
毎回上下のボタンで高さを変えなくても３つまで高さを登録可能なので自分は下記の設定にしています。
普通に座って作業を行う用 スタンディングで作業を行う用 スタンディング+α で作業を行う用 3 のプラスアルファとはなんぞや…というのは後で話しますねｗ
ボタン一つで上記の高さに変えられるので、「コーヒーを汲みに行くついでにスタンディングの高さに変更しておく」みたいなこともできます。（といっても、数秒で設定した高さに変わるのでコーヒー汲まなくても待ち時間があるわけではありません。）
座って作業し続けて疲れたなってときに、たまに 30 分ぐらい立ちながら作業をすると良い気分転換になるので、個人的には買ってよかったデスクまわりの商品一位だと思っています。（今もスタンディングで記事を書いています^^）
天板 (ヤスリがけ＆ニス塗った直後の机)
天板はホームセンターのコーナンで取り扱っている横 150cm、縦 75cm、厚さ 3cm の天板にしています！（オンラインショップには同様のものがなかったので、店鋪だけの扱いの商品かもしれません。）
コーナンでは木材のカットサービスがあるので自分が望むサイズに切り出してもらうこともできるのですが、今回はちょうどよいサイズのものがあったので既製品を選びました！
買ったばかりのときは木材感が強いので、同ホームセンターで紙やすりとニスを購入して仕上げを行っています！
自分で仕上げ作業を行うと愛着が湧くのでもしデスクの足と天板を分けたデスクを使う場合は自作天板はとてもおすすめです！
椅子 椅子はイートキのサリダチェア(YL9-BLEL)を使っています。
オフィスチェアといえばハーマンミラーのアーロンチェアが有名ですが、以前使っていたニトリのオフィスチェアが壊れたのをきっかけに新しい椅子を探していたため、さすがにそこまでのステップアップは考えず数万円で買える手軽な椅子を選択しました。
自分は椅子だけで使わずに、腰にクッションを置きながら利用しているのですが、特に不満はないのでこのまま使い続けたいなと思っています。
たまに腰の疲れも感じますが、そういうときはスタンディング比率を高めると腰が良くなるので、椅子で腰痛を防ぐというよりもスタンディングで腰痛を防ぐ形になっていますｗ
ディスプレイ ディスプレイは画像の左から下記になっています！
iiyama 23.8 インチディスプレイ XB2481HSU-B4D HUAWEI MateView GT 34-inch BenQ 24 インチディスプレイ GL2460HM 写真だと角度などで似たようなサイズに見えますが、真ん中の 34 インチウルトラディスプレイは良い感じにでかいです。
上記のように 1 画面の左側でコードを書きながら、右側で画面を確認することが余裕でできます。
上記のように 3 画面ぐらいでもいけるので、コード＋画面＋リファレンス的な形も一画面で完結することができます。
私の場合は基本的には下記のような使い方をしています。
ウルトラディスプレイは前述の 2 画面の使い方 左のディスプレイで開発で見ている画面以外のブラウザ 右のディスプレイで slack やポモドーロ関連のツール 一つの画面で切り替えなどを行って作業することも可能ですが、コーディングにマストなものを真ん中のスクリーンに集約することで意識的に左右を見ない限りは余計なものが目に入ってこないという環境にしています。
アクセサリ関連 USB ハブ USB ハブは Anker PowerExpand 8-in-1を使っています。</description>
    </item>
    
    <item>
      <title>ポモドーロ・テクニックに関して改めて整理してみる</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_1120/</link>
      <pubDate>Sun, 20 Nov 2022 23:07:59 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_1120/</guid>
      <description>前置き（ここは記事を書くきっかけなので読み飛ばし OK です） まだ開発者として働き始める何年も前に、alphatodoというタスク管理アプリを作りました。
アプリ名の由来は「あなたがすべきすべてのこと」という意味の all (you) have to do というフレーズと、タスク管理はすべての仕事の一歩目という意味からギリシャ語の第一文字である α の音から取っています。
と、アプリを作るぐらいですから、タスク管理ツールや生産性に関する興味関心は昔からありました。
その関心とは裏腹に、最近は仕事をしているときもチーム全体のタスク管理で使っている asana ぐらいしかプロダクティビティに関するツールを用いておらずで、日々のタスク管理は下記のようなものだけになっています。
タスク管理（asana を用いてタスクの一覧化とスコープ分解を行う）
PJ 全体のタスクを親タスクとして asana のカードを作る ここのサイズ感は PJ の規模次第で、数ヶ月のものから 1week のものまである このカードは kanban レーンにおいて in progress に載せずに todo に置き続ける 1 の親タスクのサブタスクで全体のタスクを細かく切り分けたタスクを管理する このサブタスクは in progress の状態になったときに、それぞれ別のカードとして kanban 上の in progress に置く ここのタスクのサイズ感は「アウトプットが伴うもの」で設定する in progress ⇒ review ⇒ done の流れに乗せて、チームメンバーとの進捗が見える化できるようにアウトプットが伴う粒度でタスク分解しています 開発タスクの場合は、１ PR のサイズ感で切り出す 上記子タスクのカードのサブタスクで、さらに細かい todo を記載する 毎日の todo 管理（slack を用いてその日にやるべきこと一覧と優先順位設計を行う）
一日の初めに上記 3 でセットした todo や、その日にやるべきレビューや MTG などの予定を slack の個人メッセージにすべて書き出す 優先順位順に並び替える 上から片付けていく 上記でタスク管理としては十分機能しています。</description>
    </item>
    
    <item>
      <title>リモートワークファシリテーションのまなび</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_1119/</link>
      <pubDate>Sat, 19 Nov 2022 20:03:51 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_1119/</guid>
      <description>関わっていたサービスが MBO を行い、半年ほど前からサービスラインの異なる新しいサービスに関わるようになりました。
そのチームでは当時開発チームの課題に関してメンバー全員で話す場がなく、「えいや！」と会議体を設計して、MTG のファシリテーションを行っています。
半年を経て、話される議題も「ベストプラクティスが整っているような問い」や「やってみることのリスクが少ないチャレンジ」から、複数の可能性や実行する際のメリデメをしっかりと把握しなければならない課題の比重が少しずつ増えてきています。
また、チームメンバーの数も増えてきて、結果としてチーム内の技術やサービスに関する理解の深度もバラバラになってきたため、ファシリテーションの難しさを感じることも多くなりました。
そんな折に fukabori.fm のファシリテーション会を聞き直し、またそこで紹介されていたファシリテーションに関するスライドを読んだところ学びや発見が多くあったので、ログがてら気になった点をまとめてみようと思います。
（文章内の引用は podcast の発言か、podcast 内で参考にあげらている COPILOT 社の「リモートワークにおけるファシリテーションの方法論」から引用させて頂いています。）
まなび 1. ファシリテーションとは、会議の進行役や運営役ではない。そのため関係するメンバー全員で行っていくべきものである より良いゴールを達成するために必要な一連の行為が適切に行われる状態をつくること
-本資料における「ファシリテーションの定義」-
なぜ会議をするのか？ そのためにファシリテーションがなぜ必要なのか？ 上記の問いを改めて考えるとこの考えは当たり前かもしれないのですが、毎回進行役や事前のドキュメント準備などを進めているとどうしても「ファシリテーターと参加者」のように境界を作って考えがちになります。
役割の違いはあれど、そこに負荷・権限・責務の違いはなく、参加メンバー全員で協力して創造的な場を作るという捉え方はとても大切だと再認識しました。
2. 小分けできる MTG は小分けにする コミュニケーションがずれるリスクを軽減するために、MTG を小分けにしましょう。
これまで週 1 回・2 時間の MTG を開催していた場合に、リモートワーク環境ではそれを 1 時間ずつ・週 2 回の MTG に小分けにすると、メンバー間での認識のズレは少なくなります
-コミュニケーションを小分けにする-
リモートになってさらっと話す場の設定が難しくなり、MTG で詰めたいことを事前に洗い出して、一つの MTG で複数の論点に関して話すことが多くなったと感じています。
「あー今日も MTG が予定よりも長引いてしまった…」という状態が常態化していたのですが、長時間かけて複数の論点を話す場を作るのではなく、短時間で一つの論点を話す場にすることで、下記のメリットがあるのだなと改めて感じました。
■ 議論したい論点を一つに絞ることで事前のゴール設計が容易になり、論点の散らばりを減らせる。 議論の前には前提やゴール設計が重要になりますが、論点が多くなれば多くなるほどここの設計や、参加者のインプットが複雑になります。
また論点が複数になることで、「あれ、今まで話してたのって xx だよね？いつの間にか〇〇の話になっていない？」と、MTG で話されるべき論点が散らばってしまって意見の収束も難しくなります。
上記の課題は、論点を絞ることで一定解決できるのだと考えています。
■ 時間が生み出す環境の変化に対する不確実性を減らすことができる 週一の定例を設けて、PJ の進捗を話すような場合、一週間分の進捗や課題を 1 時間かけて確認する MTG になります。ここには多くの変化を踏まえた振り返りや、次の一週間全体という長い期間の意思決定を行う必要性があります。
しかし、それを火曜日と金曜日に 30 分ずつ確認する MTG にした場合、より少ない変化や、現在の状況に沿った意思決定ができ、またその意思決定の範囲も短くなることで不確実性をコントロールしやすくなります。</description>
    </item>
    
    <item>
      <title>チームのテストを書く負担を減らそうとしてる話</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_0730/</link>
      <pubDate>Sat, 30 Jul 2022 23:47:18 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_0730/</guid>
      <description>4 月の半ばから新しいサービスに関わるようになりました。
チームメンバーも変わったんですが、朝会などでテストを書くのが辛いという声を聞くことが少なくなくありました。
前のサービスでは、テスト規約があったり、テストを書くのが好きな人達が多かったからか、自分もテストを書くのは好きな方なので「なにかできないかな？」とちょっと考えたりしていた。
いろいろな方の助けもあって、ちょうどそれらが少し形づいた＆今後の展開も見えてきたタイミングで社内勉強会があったので、今までの動きや今後やりたいことをスライドにしてみました。
せっかくなのでブログでその時の資料を公開してみようと思います。
社内勉強会の資料ということで、色々隠してあり、見にくい部分も多くて恐縮の嵐ですが、きっと他チームに入ったときもこういう感じで進めていくとワークするんだろうなぁという流れになってると思うので、もし同じ課題感がある人はぜひ参考にしてみてください。
新しい施策をチームに浸透させることは、言うは易しなので、少しずつ成果につながる形で進めて行けると良いなぁ。。、
スライド</description>
    </item>
    
    <item>
      <title>Hugo x Github Pages でブログを作る</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_0716/</link>
      <pubDate>Sat, 16 Jul 2022 22:17:33 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_0716/</guid>
      <description>100 番煎じぐらいかもしれませんが、せっかく Hugo x Github Pages でこちらのブログを作ってみたので、一連の作業ログを残しておこうと思います。
取り急ぎの補足 基本は hugo のクイックスタート参照で OK https://gohugo.io/getting-started/quick-start/ 自分が選んだテーマにも同様のクイックスタートがある場合が多いのでそちら参照した方がよい このブログのテーマ: https://github.com/adityatelange/hugo-PaperMod/wiki/Installation おすすめの hugo テーマまとめてるサイトとかあります 公式: https://themes.gohugo.io/ Hugo を導入する では早速ブログ作成してみましょう！
まずは Hugo の導入からです。
brew install hugo hugo new site サイト名 # 今後選ぶテーマによっては下記のようにyml形式を選んだ方がよい場合もある # ymlフォーマット選ばない場合はtoml形式になる # 後でconfigファイルを設定するときに toml か yml のどちらかでサンプルのテンプレートを作っているときがあるので # 先にテーマを選んだほうが良いです hugo new site サイト名 -f yml git init cd サイト名 git init テーマ指定 # テーマによってコマンドは変わります # 下記はこのブログのテーマのPaperModの場合 git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive config ファイルを設定</description>
    </item>
    
    <item>
      <title>新メンバーを迎えるための開発ドキュメント</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2021_1212/</link>
      <pubDate>Sun, 12 Dec 2021 22:55:33 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2021_1212/</guid>
      <description>こんにちは matinana です。 融資型クラウドファウンディングのサービス開発を行っています。 今日は、来年 3 人目のエンジニア1をチームに迎えるにあたり準備しているドキュメントの話をします！
この記事は**CAMPFIRE Advent Calendar 2021**の 13 日目の記事です。
本記事の目的 この記事では、小さな開発チームである自分たちが用意している（or 用意しようと思っている）開発関連のドキュメントを共有することで、
同じような他の小さなチームの方にとって 明日から開発チームに入るドキドキのエンジニアにとって 「こういう情報があれば・分かれば」不安なく開発進められそうだな！という指針の一つになればと思っています 😊
また、ドキュメントを準備している自分たちにとっても、「なんでこのドキュメントって必要なんだっけ？」という問いへの整理の意味も込めています。
目次 1. オンボーディングドキュメント 2. 日々の業務に関するドキュメント 3. 開発環境に関するドキュメント 4. 仕様に関するドキュメント 5. アーキテクチャ・規約に関するドキュメント
1. オンボーディングドキュメント まずは、入ってきたメンバーへのオンボーディングドキュメントです。
CAMPFIRE では コミュニケーションパートナー制度など、HR 部門を主体としたオンボーディングサポートが大変充実しているのですが、このパートでは開発側で準備しようと考えていることを共有します。
ちょうど先日、新メンバーとの顔合わせがあったのですが、**「チームに貢献出来るか？」**という点が一番の不安のようでした。
私自身も、入社時はこの不安が一番大きかったので、まずはこの不安を少しでも減らせるように
一定期間で目標にする状態を具体化 それをフォロー出来るためのヘルプ環境があること 上記２つを初めに共有することが大切だなと考えています。
1. 一定期間で目標にする状態を具体化 入ってきたメンバーが迷わずに前に進めるように、チームにジョインしてから一定期間で期待する動きや具体的なタスクの内容をドキュメントとして共有します。
具体的には
一週間で期待する動き 一ヶ月間で期待する動き 上記期間で担って貰うタスクがどんなタスクになるのか 上記をドキュメントにまとめます。
一週間や一ヶ月でどうなっていればよいのか？その時にどういうレベルのタスクと向き合うことになるのか？
これを事前に把握出来ることで、「今日何やれば良いんだろう？」「明日や来週はどんな仕事してるんだろう？」という不明瞭な不安を取り除く事ができ、「この実装どうすれば良いんだろう？」という明確な答えが出る悩みのみが発生する環境を目指しています。
2. 定めた目標を本人とチームが一丸となって達成出来るサポートの仕組みを明示化 目標や取り組むタスクが具現化出来ても、まだチームに入ったばかり。当然わからないことや不安なことは沢山出てきます。
そういう際に悩みを拾い上げることが出来る環境が大切ですよね！
具体的には下記の仕組みで、当人からとチーム内からの双方向による困りごとの拾い上げが出来ればと考えています。
slack チャンネル コミュニケーションのベースとなるスラックでは、開発チャンネル以外にも下記の 3 つのチャンネルを用いて困りごとの拾い上げを出来るように考えています。
1. プロダクト名_help チャンネル Dev＆Biz のプロダクトメンバーが入っている質問用チャンネル。 事業についてやドメイン知識など、チャンネル名にあるように困った時に dev 以外の内容も聞ける場所です。</description>
    </item>
    
    <item>
      <title>リードエンジニアの施策や動きのまとめ</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2021_0630_2/</link>
      <pubDate>Wed, 30 Jun 2021 23:54:03 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2021_0630_2/</guid>
      <description>人 ◕ ‿‿ ◕ 人 「僕たちのサービスで、リードエンジニアになってよ！」
と、言われた時にスムーズに業務に移れるように、様々な企業でリードエンジニアの方々が行った施策を下記の３点の目線からまとめてみようと思います。網羅的に列挙するのではなく、各社の tips をまとめることで、3 点の肝を掴むきっかけになればと考えています。
設計・開発環境整備 コミュニケーション 意思決定 0. 自社のリードエンジニアのミッションを決める ３つの視点から…といいつつも、早速脱線して０項目目…。
いろいろな記事を読んでいく中で、どこの企業でもリードエンジニアが担う責務や、貢献をしっかりと定義している企業が多かったです。
開発からマネジメントまで多岐にわたる貢献を求められるからこそ、しっかりとポジションが持つ意味を言語化する必要性を感じます。
三者のリードエンジニアの方の記事から引用していますが、大枠は共通する部分があるといえど、どの粒度で捉えるのかというのは企業や人によって異なるため、チームで共通認識を持ちやすい形で定義することが重要だなと感じました。
Gunosy 弊社のリードエンジニアのミッションとは以下です。
高い技術力ならびに、事業ドメインへの深い知識を持ち、 事業におけるトップエンジニアとしてプロダクトの成長に貢献する （中略）
技術的意思決定のデリゲーション 育成とキャリア を担って欲しいという思いで設置された背景があります。
引用元:リードエンジニアとしての役割
BASE 事業に配属され、事業の中での開発やサービス運営をリードする以上の成果を期待されたロール。 サービスの継続的発展を実現するための技術力や、BASE のサービス哲学を具現化するためのサービス開発力などを兼ね備え、圧倒的な主体性でサービスの成長に取り組む模範となるべき役割を担う。
引用元:リードエンジニアにおけるサービスリードという役割
クックパッド 今の会社で「テックリード」に何が求められているのかを明確にするところから始めました。 ・コードやプロダクトの品質の担保 ・コードレビュー ・他部署との技術的な相談をする場合の窓口 ・メンバーの生産性を向上できるように立ち回る ・メンバーの成長を促進する ・メンバーの半期ごとの評価を行う 引用元:初めてテックリードになって半年が経ったので振り返る
1. 設計・開発環境整備 リードエンジニアに求められる役割としてアーキテクチャの設計や開発環境の整備などは最たるものの一つですが、中でも興味深かったのは未来を見据えた取り組みへのコミットが一エンジニアの立場よりも強い印象が多かったことです。
具体的には
1. 今後実装をしていく/改修していく上で障害になりうる部分を早めに対処する態度 インフラ・サービスレベルの技術選定をしっかりと行う 放置気味になっている不具合の見える化・修正 CI や環境構築の整備 2. （将来負債にならないための）現状把握と属人化しない開発チームへの投資 設計やコードレビューには必ず目を通し、サービスの全体像を常に把握する姿勢 チケット管理を適切に行い、何が背景で何がゴールなのかをしっかりと定義して、誰もが共通の認識＆アウトプットを出せる準備を行う姿勢 開発ドキュメントの整理 コーディング規約・テスト規約などを属人化しないように処理の切り出し先やエラーログの粒度までの設計 上記のような、すぐに成果の出るアウトプットではなく、長期的にチームの価値が高まるアウトプットを意識している方が多くいました。
2. コミュニケーション 大軸としてはチームのメンバーが最大限に力を発揮出来るようにすることを主体にコミュニケーションを取ることが肝だと感じます。
チームの技術力の底上げのために必要な施策や挑戦の設定 勉強会の主催 責務の適切な委譲 メンバーの進捗管理 メンバーが開発に集中できるように他部署との窓口になる 1 on 1 心理的安全性の確保 メンバーの日々のペインの洗い出し また、</description>
    </item>
    
    <item>
      <title>サービスリードエンジニアとは？</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2021_0630/</link>
      <pubDate>Wed, 30 Jun 2021 22:52:13 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2021_0630/</guid>
      <description>人 ◕ ‿‿ ◕ 人 「僕たちのサービスで、サービスリードエンジニアになってよ！」
と、いつ言われても大丈夫なように、テックリードエンジニアとともにリードエンジニアの一翼を担うサービスリードエンジニアに関して整理してみます。
恥ずかしながら私自身もゆるふわっとしか理解していないので、いくつかの企業のインタビューなどを引用し、「サービスリードエンジニア」に求められる資質や態度を明らかにできればと考えています。
結論: サービスリードエンジニアとは？ 「サービスリード」とは、その一文字を直す作業に意義、喜びを感じられること
引用元: リードエンジニアにおけるサービスリードという役割
早速の結論が引用という暴挙になりましたが、引用元の記事が素晴らしすぎるので、使わせていただきました。
サービスリードに関して調べていく中でわかったことは、
BASE DeNA 関連記事を読むと、ほぼ上記２つの企業のどちらかの情報発信にあたるということです（笑）。
理解を促進するという意味でも、二社の情報発信に心より感謝を述べます。ありがとうございます！
そもそものサービスリードの定義は？ 先程の結論がサービスリードの本質をすべて表していると感じましたが、下記３つの引用先で伝えているサービスリードの定義を見ることで、その大枠を掴もうと思います。
ランサーズ サービスリードエンジニアは、サービス開発におけるユーザー体験の向上など、幅広い面でチームをリードしていく職業です。主な仕事は、ユーザーの行動などを SQL やアナリティクスツールで解析して、そこからサービスの企画をしたり、実際に企画した機能を実装したりしています。
引用元: ユーザーの心をハックせよ！沼野剛志が語る「サービスリードエンジニア」という仕事の醍醐味
DeNA サービスを成功させるために何をすべきか自分自身で考え、技術力を駆使して率先して実現できるオールラウンドなエンジニアです。システム設計や開発はもちろん、機能やサービスの意図、目標とする数字などを理解して、それに適合するような仕様を自ら考えます。また、これから行おうとする施策について、仮説が正しいかどうかの分析、判断のサポートを行います。
引用元: DeNA 採用ページ内 キャリアパス
BASE BASE のサービス哲学を熟知し、高い顧客体験を実現するサービスを開発することで、体験の質を通じたサービス信頼性を実現する。 顧客に支持され続けるサービスの継続的発展に寄与し、サービスづくりの模範となる役割。
引用元: リードエンジニアにおけるサービスリードという役割
上記のそれぞれの定義を見ると、サービスへの理解とコミットメントがサービスリードの軸のように思えます。
サービスを通してミッションを実現するために動く姿勢はテックリード・サービスリードともにありますが、
開発チームの内的要因（アーキテクチャ・開発環境）への貢献の比重 内的要因から育まれたものを外的要因（ステークホルダー・サービス）に伝えるための貢献の比重 上記の働きかけのバランスのうち前者が強いのがテックリード、後者が強いのがサービスリードなのかなと私は感じました。
サービスリードがいることで開発がどう良くなるのか？ シンプルに、“サービスリードエンジニア”がいないとプロダクトが劣化しますね。
引用元: 【決意表明 vol.2】技術部部長が語る、ゲームの可能性を拡げる“サービスリードエンジニア”集団とは
前項までの項目で見たように、サービスリードはサービス開発にとって重要な存在であることがわかってきました。
その上で、いくつかの記事を読む中で良いな〜と思った２つの考え方を共有させてください。
1. サービスリードは適切な粒度の問題解決を行うという姿勢 （前略）その修正の粒度や判断力が顧客ニーズや会社の OKR 達成に対して不適切であれば、その行動を誰かがマネジメントする必要があります。（中略） 目の前で困っている人、その裏側にいる人を想像し、適切な粒度の修正を行うという判断力は、テックを中心とした思想とは少し違う価値観が求められることが多いようです。
引用元: リードエンジニアにおけるサービスリードという役割
開発サイドはどうしてもビジネスサイド側からの要求を前提条件として受け入れてしまいがちになります。それは、
サービスにおける勝ち筋への理解 サービスにおける専門領域への理解 上記のような本質的な分野への深度がビジネスサイド &amp;gt; エンジニアサイドになりがちなことや、
リファクタされたコード 網羅されたテストコード 上記のような負債にならない長期的な価値へのコミットメントを正とする思想がコミュニティにあるからだと思います。
しかし、サービスリードには、そのタイミングにおける適切な粒度の問題解決が必要だと記事では述べられています。 これ…もう…めちゃくちゃわかる…。</description>
    </item>
    
    <item>
      <title>未経験からのチーム開発で学んだTipsと態度</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2020_1221/</link>
      <pubDate>Mon, 21 Dec 2020 22:49:54 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2020_1221/</guid>
      <description>はじめに こんにちは matinana です。 CAMPFIRE Ownersという融資型クラウドファウンディングでサービス開発を行っています！
この記事は**CAMPFIRE Advent Calendar 2020**の 21 日目の記事です。
アドベントカレンダーも終盤戦に入りましたが、CAMP の記事の中にはゲーム要素を含んだ**走る！音が出る！HTML でミニゲームをつくりました**など面白い記事が沢山ありますのでぜひこの機会に覗いてみてください！
本記事の目的 チーム開発に関して全く知らなかった約一年前の自分が、一年間のチーム開発を通して学んだ態度や tips をまとめることで、
チーム開発の流れの理解 チーム開発に必要になりそうな態度の一案を提示 上記を行い、これからチーム開発を始める人の不安を払拭する一助になることを目的にしています。
書こうと思った動機（当時の私） 私が CAMPFIRE に入社したのは昨年の 11 月です。 独学でいくつかのアプリを作っていましたが、プログラミングの業務や他の人とチーム開発することは未経験でした。
そのため、当時の自分は github でブランチを分けての開発などもほぼしたことがなく、
使ったことがある git コマンドといえばgit pushのみ (addやcommitは vscode でポチッと出来た) GitHub Flowどころかプルリクエストの作成も使ったことがない 上記のような、チーム開発のtの字も知らない（チですらない…）状態でした。
チーム開発一年目というのは、エンジニアとしてもきっと一年目。 目の前の山積みの問題にしっかりと向き合えるように、チーム開発の雰囲気を掴み取ってもらい、闇雲に生まれてしまう不安を軽減できればと考えています。
話さないこと ✕ 開発〜プルリクエスト作成までの基本的な git のコマンドについて こちらは@shh-nkmr さんが書いてくださっているgit 初学者の初めてのチーム開発で気をつける事の備忘録にまとまっています。 開発〜プルリクエスト作成までの基本的な git コマンドに自信がない場合はこちらをご参照ください。
✕ 具体的なコードの書き方やリファクタのコツなどに関して 私も知りたいです 😂 笑 残念ながらこれらは対象外です。
目次 基本的なチーム開発の流れの整理 課題や仕様の整理 実装 git blame を活かす 実装のスコープを意識する コミットメッセージにプレフィックスをつける rebase でコミットを整理する PR 作成 気になることは全部コメントで書く PR を小分けにする 動作確認をしっかりする レビュー 疑問点を投げるのも大切なこと 良いと思った部分は言葉にして良いと言う 悪い点を指摘するのではなく、相手の理解が進む形で投げるようにする nits IMO MUST などのレビューコメントにラベルをつけてみる 本番反映 あとがき 基本的なチーム開発の流れの整理 GitHub Flow どころかプルリクエストの作成も使ったことがない</description>
    </item>
    
    <item>
      <title>業界未経験者がスマホアプリを作るまでに考えたこと・調べたこと・やったこと</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2019_0923/</link>
      <pubDate>Mon, 23 Sep 2019 22:47:10 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2019_0923/</guid>
      <description>はじめに 本記事について 本記事は React Native(Expo)を用いてOmoidata 日記というスマホ用日記アプリを業界未経験者の私が独学で作るまでに考えたこと、参考にしたサイト、使ったツールなどをまとめたものです。 アプリの概要設計、デザイン（プロトタイピング）、開発、公開までのセクションに分けてそれぞれ紹介いたします。
目的 プログラミング初心者の方々は、周りにアプリを作った事がある知人も少なく、Progate やドットインストールで基本を学んだのち、どのようにオリジナルアプリを作れば良いか手がかりが少ないと思います。 そこで、合格体験記のように私のアプリ制作の流れをシェアすることで、「アプリ制作ってどうやるのか全くわかんね！＼(^o^)／」という状態から「何をすべき（考える・調べる）かの輪郭はわかる」という状態への昇華を目的としています。
対象読者 「プログラミングの初歩的な知識があり、作りたいスマホアプリのアイデアがあるけれど、アプリ制作のやり方がわからない方」
今回は対象読者を「作りたいアプリのアイデアがある方」としています。 そのため、アイデアの創出方法などには触れていません。 また、React Native 製アプリを引き合いに出して説明していますが、ハイブリッドアプリ限定でなく、ネイティブアプリ制作の方にも参考になるような記事を目指して書いています。
目次 基本的な考え方 Done is better than perfect! 自分が欲しいものを作る データを残しておく 概要設計 人気のアプリをダウンロードしてスマホアプリのイロハを感じる 競合アプリをダウンロードしてコアな機能を整理する 作りたい機能に近しいアプリをダウンロードして考えを整理する UI のイメージをより明確にする コンポーネントライブラリーを確認しておく デザイン Adobe XD の使い方を学ぶ XD で参考資料を整える XD で画面を作ってみる 細かいデザインについて 開発 Google 検索をする 公式のドキュメントを読む オープンソースのコードリーディングをする Q&amp;amp;A サイトを利用する 開発の前に… その他 Tips 公開まで プライバシーポリシー・利用規約 ストア用スクリーンショット アイコン サポート URL 基本的な考え方 開発やデザインなどの実装の話の前に、アプリ制作をする上で持っていた方がよいと思う考え方を３つほど記載いたします。
1. Done is better than perfect! 個人開発界隈で擦り切れるほど聞かれる言葉で、もはや語ることはありませんが、やはり初めてアプリ開発をする場合はこのメッセージよりも大切な態度はないと思うので記しておきます。
2. 自分が欲しいものを作る “最悪自分のための最高のサービスになってもいいじゃないですか” &amp;gt; [引用元] 個人開発のモチベーションが続かない、作り終わらない。原因と対策を考えてみた。</description>
    </item>
    
    <item>
      <title>React Native(Expo)で画像をFirebase StorageとFirestoreで管理する</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2019_0919/</link>
      <pubDate>Thu, 19 Sep 2019 22:43:58 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2019_0919/</guid>
      <description>本記事について(ゴール） こんにちは matinana です。技術記事人生初執筆です。宜しくお願いします。
本記事では、下記 GIF のように React Native(Expo)を用いてフォトライブラリの画像を Firebase Storage に保存し、ストレージのダウンロード URL と画像のキャッチコピーを Firestore で管理するまでの一連の実装をしてみます。
はじめに 主なフレームワーク等のバージョンについて 2019 年 9 月 11 日現在最新（SDK34)の Expo を使っています。 &amp;ldquo;expo&amp;rdquo;: &amp;ldquo;^34.0.1&amp;rdquo;, &amp;ldquo;react&amp;rdquo;: &amp;ldquo;16.8.3&amp;rdquo;, &amp;ldquo;firebase&amp;rdquo;: &amp;ldquo;^6.4.0&amp;rdquo;,
ソースコードの記述について この記事では要所のみを説明しています。そのため、記事内のソースコードは全文ではありません。実際に手を動かしてみる場合は、こちらのソースコードをコピーして使うというよりも、Githubの方を参照お願いします。
実装の流れ コンポーネントを作る imagePicker を使ってフォトライブラリの画像を取得する Firebase をプロジェクトに導入する フォトライブラリから取得した画像を Firebese Storage に保存し、保存した画像のダウンロード URL を Firestore と紐付ける 1. コンポーネントを作る まずは外観を作るところから始めましょう。 と、言っても複雑な見た目は作っておらず、要素は３つのみです。
・PostScreen.js: モーダルを表示するボタンと追加された投稿を一覧で表示するスクリーン ・AddPostModa.js: 写真を追加するための登録フォーム（モーダル） ・Post.js: それぞれの投稿のリスト
import React from &amp;#39;react&amp;#39;; import { StyleSheet, View, Dimensions, KeyboardAvoidingView, } from &amp;#39;react-native&amp;#39;; import { Button } from &amp;#39;react-native-elements&amp;#39;; import Modal from &amp;#39;react-native-modal&amp;#39;; import Post from &amp;#39;.</description>
    </item>
    
  </channel>
</rss>
