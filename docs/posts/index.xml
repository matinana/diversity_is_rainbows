<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Diversity is Rainbows!</title>
    <link>https://matinana.github.io/diversity_is_rainbows/posts/</link>
    <description>Recent content in Posts on Diversity is Rainbows!</description>
    <image>
      <url>https://matinana.github.io/diversity_is_rainbows/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://matinana.github.io/diversity_is_rainbows/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 20 Nov 2022 23:07:59 +0900</lastBuildDate><atom:link href="https://matinana.github.io/diversity_is_rainbows/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ポモドーロ・テクニックに関して改めて整理してみる</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_1120/</link>
      <pubDate>Sun, 20 Nov 2022 23:07:59 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_1120/</guid>
      <description>前置き（ここは記事を書くきっかけなので読み飛ばし OK です） まだ開発者として働き始める何年も前に、alphatodoというタスク管理アプリを作りました。
アプリ名の由来は「あなたがすべきすべてのこと」という意味の all (you) have to do というフレーズと、タスク管理はすべての仕事の一歩目という意味からギリシャ語の第一文字である α の音から取っています。
と、アプリを作るぐらいですから、タスク管理ツールや生産性に関する興味関心は昔からありました。
その関心とは裏腹に、最近は仕事をしているときもチーム全体のタスク管理で使っている asana ぐらいしかプロダクティビティに関するツールを用いておらずで、日々のタスク管理は下記のようなものだけになっています。
タスク管理（asana を用いてタスクの一覧化とスコープ分解を行う）
PJ 全体のタスクを親タスクとして asana のカードを作る ここのサイズ感は PJ の規模次第で、数ヶ月のものから 1week のものまである このカードは kanban レーンにおいて in progress に載せずに todo に置き続ける 1 の親タスクのサブタスクで全体のタスクを細かく切り分けたタスクを管理する このサブタスクは in progress の状態になったときに、それぞれ別のカードとして kanban 上の in progress に置く ここのタスクのサイズ感は「アウトプットが伴うもの」で設定する in progress ⇒ review ⇒ done の流れに乗せて、チームメンバーとの進捗が見える化できるようにアウトプットが伴う粒度でタスク分解しています 開発タスクの場合は、１ PR のサイズ感で切り出す 上記子タスクのカードのサブタスクで、さらに細かい todo を記載する 毎日の todo 管理（slack を用いてその日にやるべきこと一覧と優先順位設計を行う）
一日の初めに上記 3 でセットした todo や、その日にやるべきレビューや MTG などの予定を slack の個人メッセージにすべて書き出す 優先順位順に並び替える 上から片付けていく 上記でタスク管理としては十分機能しています。</description>
    </item>
    
    <item>
      <title>リモートワークファシリテーションのまなび</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_1119/</link>
      <pubDate>Sat, 19 Nov 2022 20:03:51 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_1119/</guid>
      <description>関わっていたサービスが MBO を行い、半年ほど前からサービスラインの異なる新しいサービスに関わるようになりました。
そのチームでは当時開発チームの課題に関してメンバー全員で話す場がなく、「えいや！」と会議体を設計して、MTG のファシリテーションを行っています。
半年を経て、話される議題も「ベストプラクティスが整っているような問い」や「やってみることのリスクが少ないチャレンジ」から、複数の可能性や実行する際のメリデメをしっかりと把握しなければならない課題の比重が少しずつ増えてきています。
また、チームメンバーの数も増えてきて、結果としてチーム内の技術やサービスに関する理解の深度もバラバラになってきたため、ファシリテーションの難しさを感じることも多くなりました。
そんな折に fukabori.fm のファシリテーション会を聞き直し、またそこで紹介されていたファシリテーションに関するスライドを読んだところ学びや発見が多くあったので、ログがてら気になった点をまとめてみようと思います。
（文章内の引用は podcast の発言か、podcast 内で参考にあげらている COPILOT 社の「リモートワークにおけるファシリテーションの方法論」から引用させて頂いています。）
まなび 1. ファシリテーションとは、会議の進行役や運営役ではない。そのため関係するメンバー全員で行っていくべきものである より良いゴールを達成するために必要な一連の行為が適切に行われる状態をつくること
-本資料における「ファシリテーションの定義」-
なぜ会議をするのか？ そのためにファシリテーションがなぜ必要なのか？ 上記の問いを改めて考えるとこの考えは当たり前かもしれないのですが、毎回進行役や事前のドキュメント準備などを進めているとどうしても「ファシリテーターと参加者」のように境界を作って考えがちになります。
役割の違いはあれど、そこに負荷・権限・責務の違いはなく、参加メンバー全員で協力して創造的な場を作るという捉え方はとても大切だと再認識しました。
2. 小分けできる MTG は小分けにする コミュニケーションがずれるリスクを軽減するために、MTG を小分けにしましょう。
これまで週 1 回・2 時間の MTG を開催していた場合に、リモートワーク環境ではそれを 1 時間ずつ・週 2 回の MTG に小分けにすると、メンバー間での認識のズレは少なくなります
-コミュニケーションを小分けにする-
リモートになってさらっと話す場の設定が難しくなり、MTG で詰めたいことを事前に洗い出して、一つの MTG で複数の論点に関して話すことが多くなったと感じています。
「あー今日も MTG が予定よりも長引いてしまった…」という状態が常態化していたのですが、長時間かけて複数の論点を話す場を作るのではなく、短時間で一つの論点を話す場にすることで、下記のメリットがあるのだなと改めて感じました。
■ 議論したい論点を一つに絞ることで事前のゴール設計が容易になり、論点の散らばりを減らせる。 議論の前には前提やゴール設計が重要になりますが、論点が多くなれば多くなるほどここの設計や、参加者のインプットが複雑になります。
また論点が複数になることで、「あれ、今まで話してたのって xx だよね？いつの間にか〇〇の話になっていない？」と、MTG で話されるべき論点が散らばってしまって意見の収束も難しくなります。
上記の課題は、論点を絞ることで一定解決できるのだと考えています。
■ 時間が生み出す環境の変化に対する不確実性を減らすことができる 週一の定例を設けて、PJ の進捗を話すような場合、一週間分の進捗や課題を 1 時間かけて確認する MTG になります。ここには多くの変化を踏まえた振り返りや、次の一週間全体という長い期間の意思決定を行う必要性があります。
しかし、それを火曜日と金曜日に 30 分ずつ確認する MTG にした場合、より少ない変化や、現在の状況に沿った意思決定ができ、またその意思決定の範囲も短くなることで不確実性をコントロールしやすくなります。</description>
    </item>
    
    <item>
      <title>チームのテストを書く負担を減らそうとしてる話</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_0730/</link>
      <pubDate>Sat, 30 Jul 2022 23:47:18 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_0730/</guid>
      <description>4 月の半ばから新しいサービスに関わるようになりました。
チームメンバーも変わったんですが、朝会などでテストを書くのが辛いという声を聞くことが少なくなくありました。
前のサービスでは、テスト規約があったり、テストを書くのが好きな人達が多かったからか、自分もテストを書くのは好きな方なので「なにかできないかな？」とちょっと考えたりしていた。
いろいろな方の助けもあって、ちょうどそれらが少し形づいた＆今後の展開も見えてきたタイミングで社内勉強会があったので、今までの動きや今後やりたいことをスライドにしてみました。
せっかくなのでブログでその時の資料を公開してみようと思います。
社内勉強会の資料ということで、色々隠してあり、見にくい部分も多くて恐縮の嵐ですが、きっと他チームに入ったときもこういう感じで進めていくとワークするんだろうなぁという流れになってると思うので、もし同じ課題感がある人はぜひ参考にしてみてください。
新しい施策をチームに浸透させることは、言うは易しなので、少しずつ成果につながる形で進めて行けると良いなぁ。。、
スライド</description>
    </item>
    
    <item>
      <title>Hugo x Github Pages でブログを作る</title>
      <link>https://matinana.github.io/diversity_is_rainbows/posts/2022_0716/</link>
      <pubDate>Sat, 16 Jul 2022 22:17:33 +0900</pubDate>
      
      <guid>https://matinana.github.io/diversity_is_rainbows/posts/2022_0716/</guid>
      <description>100 番煎じぐらいかもしれませんが、せっかく Hugo x Github Pages でこちらのブログを作ってみたので、一連の作業ログを残しておこうと思います。
取り急ぎの補足 基本は hugo のクイックスタート参照で OK https://gohugo.io/getting-started/quick-start/ 自分が選んだテーマにも同様のクイックスタートがある場合が多いのでそちら参照した方がよい このブログのテーマ: https://github.com/adityatelange/hugo-PaperMod/wiki/Installation おすすめの hugo テーマまとめてるサイトとかあります 公式: https://themes.gohugo.io/ Hugo を導入する では早速ブログ作成してみましょう！
まずは Hugo の導入からです。
brew install hugo hugo new site サイト名 # 今後選ぶテーマによっては下記のようにyml形式を選んだ方がよい場合もある # ymlフォーマット選ばない場合はtoml形式になる # 後でconfigファイルを設定するときに toml か yml のどちらかでサンプルのテンプレートを作っているときがあるので # 先にテーマを選んだほうが良いです hugo new site サイト名 -f yml git init cd サイト名 git init テーマ指定 # テーマによってコマンドは変わります # 下記はこのブログのテーマのPaperModの場合 git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive config ファイルを設定</description>
    </item>
    
  </channel>
</rss>
